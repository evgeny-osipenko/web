-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bindings for recoverable signatures feature of secp256k1
--   
--   Sign and verify recoverable signatures using the secp256k1 library.
@package secp256k1-haskell-recovery
@version 0.1.0


-- | The API for this module may change at any time. This is an internal
--   module only exposed for hacking and experimentation.
module Crypto.Secp256k1.Internal.RecoveryOps
data RecSig65
ecdsaRecoverableSignatureParseCompact :: Ptr LCtx -> Ptr RecSig65 -> Ptr Compact64 -> CInt -> IO Ret
ecdsaRecoverableSignatureConvert :: Ptr LCtx -> Ptr Sig64 -> Ptr RecSig65 -> IO Ret
ecdsaRecoverableSignatureSerializeCompact :: Ptr LCtx -> Ptr Compact64 -> Ptr CInt -> Ptr RecSig65 -> IO Ret
ecdsaSignRecoverable :: Ptr LCtx -> Ptr RecSig65 -> Ptr Msg32 -> Ptr SecKey32 -> FunPtr (NonceFun a) -> Ptr a -> IO Ret
ecdsaRecover :: Ptr LCtx -> Ptr PubKey64 -> Ptr RecSig65 -> Ptr Msg32 -> IO Ret


-- | Crytpographic functions related to recoverable signatures from
--   Bitcoin’s secp256k1 library.
--   
--   The API for this module may change at any time. This is an internal
--   module only exposed for hacking and experimentation.
module Crypto.Secp256k1.Internal.Recovery
newtype RecSig
RecSig :: ByteString -> RecSig
[$sel:get:RecSig] :: RecSig -> ByteString
data CompactRecSig
CompactRecSig :: !ByteString -> {-# UNPACK #-} !Word8 -> CompactRecSig
[$sel:rs:CompactRecSig] :: CompactRecSig -> !ByteString
[$sel:v:CompactRecSig] :: CompactRecSig -> {-# UNPACK #-} !Word8
compactRecSig :: ByteString -> Maybe CompactRecSig
serializeCompactRecSig :: CompactRecSig -> ByteString
compactRecSigFromString :: String -> Maybe CompactRecSig

-- | Parse a compact ECDSA signature (64 bytes + recovery id).
importCompactRecSig :: Ctx -> CompactRecSig -> Maybe RecSig

-- | Serialize an ECDSA signature in compact format (64 bytes + recovery
--   id).
exportCompactRecSig :: Ctx -> RecSig -> CompactRecSig

-- | Convert a recoverable signature into a normal signature.
convertRecSig :: Ctx -> RecSig -> Sig

-- | Create a recoverable ECDSA signature.
signRecMsg :: Ctx -> SecKey -> Msg -> RecSig

-- | Recover an ECDSA public key from a signature.
recover :: Ctx -> RecSig -> Msg -> Maybe PubKey
instance Control.DeepSeq.NFData Crypto.Secp256k1.Internal.Recovery.RecSig
instance GHC.Generics.Generic Crypto.Secp256k1.Internal.Recovery.RecSig
instance GHC.Classes.Eq Crypto.Secp256k1.Internal.Recovery.RecSig
instance GHC.Generics.Generic Crypto.Secp256k1.Internal.Recovery.CompactRecSig
instance GHC.Classes.Eq Crypto.Secp256k1.Internal.Recovery.CompactRecSig
instance Control.DeepSeq.NFData Crypto.Secp256k1.Internal.Recovery.CompactRecSig
instance GHC.Read.Read Crypto.Secp256k1.Internal.Recovery.CompactRecSig
instance Data.String.IsString Crypto.Secp256k1.Internal.Recovery.CompactRecSig
instance GHC.Show.Show Crypto.Secp256k1.Internal.Recovery.CompactRecSig


-- | Crytpographic functions related to recoverable signatures from
--   Bitcoin’s secp256k1 library.
module Crypto.Secp256k1.Recovery
newtype () => Ctx
Ctx :: Ptr LCtx -> Ctx
[$sel:get:Ctx] :: Ctx -> Ptr LCtx
withContext :: (Ctx -> IO a) -> IO a
randomizeContext :: Ctx -> IO ()
createContext :: IO Ctx
cloneContext :: Ctx -> IO Ctx
destroyContext :: Ctx -> IO ()
newtype RecSig
RecSig :: ByteString -> RecSig
[$sel:get:RecSig] :: RecSig -> ByteString
data CompactRecSig
CompactRecSig :: !ByteString -> {-# UNPACK #-} !Word8 -> CompactRecSig
[$sel:rs:CompactRecSig] :: CompactRecSig -> !ByteString
[$sel:v:CompactRecSig] :: CompactRecSig -> {-# UNPACK #-} !Word8
compactRecSig :: ByteString -> Maybe CompactRecSig
serializeCompactRecSig :: CompactRecSig -> ByteString

-- | Parse a compact ECDSA signature (64 bytes + recovery id).
importCompactRecSig :: Ctx -> CompactRecSig -> Maybe RecSig

-- | Serialize an ECDSA signature in compact format (64 bytes + recovery
--   id).
exportCompactRecSig :: Ctx -> RecSig -> CompactRecSig

-- | Convert a recoverable signature into a normal signature.
convertRecSig :: Ctx -> RecSig -> Sig

-- | Create a recoverable ECDSA signature.
signRecMsg :: Ctx -> SecKey -> Msg -> RecSig

-- | Recover an ECDSA public key from a signature.
recover :: Ctx -> RecSig -> Msg -> Maybe PubKey
newtype () => Msg
Msg :: ByteString -> Msg
[$sel:get:Msg] :: Msg -> ByteString

-- | Import 32-byte <a>ByteString</a> as <a>Msg</a>.
msg :: ByteString -> Maybe Msg
newtype () => SecKey
SecKey :: ByteString -> SecKey
[$sel:get:SecKey] :: SecKey -> ByteString

-- | Import 32-byte <a>ByteString</a> as <a>SecKey</a>.
secKey :: ByteString -> Maybe SecKey
derivePubKey :: Ctx -> SecKey -> PubKey
newtype () => PubKey
PubKey :: ByteString -> PubKey
[$sel:get:PubKey] :: PubKey -> ByteString

-- | Import 64-byte <a>ByteString</a> as <a>PubKey</a>.
pubKey :: ByteString -> Maybe PubKey

-- | Import DER-encoded public key.
importPubKey :: Ctx -> ByteString -> Maybe PubKey

-- | Encode public key as DER. First argument <a>True</a> for compressed
--   output.
exportPubKey :: Ctx -> Bool -> PubKey -> ByteString
